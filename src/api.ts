import { Message, StreamingCallback } from './types';

// Helper function to process streaming responses
async function processStream(
  reader: ReadableStreamDefaultReader<Uint8Array>,
  onChunk: StreamingCallback
): Promise<string> {
  const decoder = new TextDecoder();
  let fullText = '';
  
  try {
    while (true) {
      const { done, value } = await reader.read();
      
      if (done) {
        // Signal completion
        onChunk('', true);
        break;
      }
      
      // Decode the chunk
      const chunk = decoder.decode(value, { stream: true });
      
      // Process the chunk (handle SSE format)
      const lines = chunk.split('\n');
      for (const line of lines) {
        if (line.startsWith('data: ') && line !== 'data: [DONE]') {
          try {
            const data = JSON.parse(line.substring(6));
            let content = '';
            
            // Extract content based on response format
            if (data.choices && data.choices[0]) {
              if (data.choices[0].text) {
                // Hyperbolic completion format
                content = data.choices[0].text;
              } else if (data.choices[0].delta && data.choices[0].delta.content) {
                // OpenRouter streaming format (newer API versions)
                content = data.choices[0].delta.content;
              } else if (data.choices[0].message && data.choices[0].message.content) {
                // OpenRouter format (older API versions)
                content = data.choices[0].message.content;
              }
            }
            
            if (content) {
              // handle initial whitespace generated by hyperbolic completion
              if (fullText === '') {
                content = content.trimStart();
              }
              fullText += content;
              onChunk(content, false);
            }
            // ignore chunks without content
          } catch (e) {
            console.error('Error parsing SSE data:', e);
          }
        }
      }
    }
  } catch (error) {
    // Check if this is an abort error (request was cancelled)
    if (error instanceof DOMException && error.name === 'AbortError') {
      console.log('Stream reading was cancelled');
      throw new Error('Request cancelled');
    } else {
      console.error('Error reading stream:', error);
      throw error;
    }
  }
  
  return fullText;
}

export async function openrouterConversation(
  actor: string,
  model: string,
  context: Message[],
  systemPrompt: string | null,
  openrouterKey: string,
  maxTokens: number = 1024,
  onChunk?: StreamingCallback,
  abortSignal?: AbortSignal,
  seed?: number
): Promise<string> {
  const messages = context.map(m => ({ role: m.role, content: m.content }));
  
  // Add system prompt if provided
  if (systemPrompt) {
    messages.unshift({ role: 'system', content: systemPrompt });
  }

  const requestBody: any = {
    model,
    messages,
    temperature: 1.0,
    max_tokens: maxTokens,
    stream: true,
  };
  
  // Add seed if provided
  if (seed !== undefined) {
    requestBody.seed = seed;
  }

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openrouterKey}`,
        'HTTP-Referer': window.location.origin,
        'X-Title': 'backrooms.directory'
      },
      body: JSON.stringify(requestBody),
      signal: abortSignal
    });

    if (!response.ok) {
      throw new Error(`OpenRouter API error: ${response.status} ${response.statusText}`);
    }

    // Process the stream
    if (onChunk && response.body) {
      const reader = response.body.getReader();
      return processStream(reader, onChunk);
    } else {
      // Fallback to non-streaming for backward compatibility
      const data = await response.json();
      return data.choices[0].message.content;
    }
  } catch (error) {
    // Check if this is an abort error (request was cancelled)
    if (error instanceof DOMException && error.name === 'AbortError') {
      console.log('OpenRouter API request was cancelled');
      throw new Error('Request cancelled');
    } else {
      console.error('Error calling OpenRouter API:', error);
      throw error;
    }
  }
}

export async function hyperbolicCompletionConversation(
  actor: string,
  model: string,
  context: Message[],
  systemPrompt: string | null,
  hyperbolicKey: string,
  maxTokens: number = 1024,
  onChunk?: StreamingCallback,
  abortSignal?: AbortSignal,
  seed?: number
): Promise<string> {
  // Format messages into a chat-like completion prompt, as 405-base does not support chat completion
  let prompt = "";
  if (systemPrompt) {
    prompt += `System: ${systemPrompt}\n\n`;
  }

  for (const message of context.map(m => ({ role: m.role, content: m.content }))) {
    prompt += `${message.role}: ${message.content}\n\n`;
  }

  prompt += "assistant: ";

  const headers = {
    'Authorization': `Bearer ${hyperbolicKey}`,
    'Content-Type': 'application/json'
  };
  
  const payload: any = {
    model,
    temperature: 1.0,
    max_tokens: maxTokens,
    prompt,
    stop: ["System:", "system:", "user:", "assistant:"],
    stream: true,
  };
  
  // Add seed if provided
  if (seed !== undefined) {
    payload.seed = seed;
  }

  try {
    const response = await fetch('https://api.hyperbolic.xyz/v1/completions', {
      method: 'POST',
      headers,
      body: JSON.stringify(payload),
      signal: abortSignal
    });

    if (!response.ok) {
      throw new Error(`Hyperbolic Completion API error: ${response.status} ${response.statusText}`);
    }

    // Process the stream
    if (onChunk && response.body) {
      const reader = response.body.getReader();
      
      // Create a wrapper for onChunk that buffers chunks and only emits them
      // when the next non-whitespace chunk is received or when the stream is done.
      //
      // Because the hyperbolic LLM is using conversation completions that end when it attempts
      // to take on a new "character", we will often see trailing newlines. We don't want to amend
      // the output after it's been emitted via the provided `onChunk`, so instead we buffer the
      // previous non-whitespace chunk and emit it with stripped newlines if it's the final chunk
      // in the completion.
      let bufferedChunk: string | null = null;
      
      const onChunkWrapper: StreamingCallback = (chunk: string, isDone: boolean) => {
        if (isDone) {
          // If we have a buffered chunk and the stream is done,
          // emit it after stripping trailing whitespace
          if (bufferedChunk !== null) {
            onChunk(bufferedChunk.replace(/\s+$/g, ''), false);
            bufferedChunk = null;
          }
          // Signal completion
          onChunk('', true);
          return;
        }
        
        // If this chunk has non-whitespace content
        if (chunk.trim().length > 0) {
          // If we have a buffered chunk, emit it first
          if (bufferedChunk !== null) {
            onChunk(bufferedChunk, false);
            bufferedChunk = null;
          }
          
          // Buffer this chunk for next time
          bufferedChunk = chunk;
        } else if (bufferedChunk !== null) {
          // This is a whitespace-only chunk, append it to the buffer
          bufferedChunk += chunk;
        } else {
          // This is a whitespace-only chunk and we have no buffer yet
          bufferedChunk = chunk;
        }
      };
      
      return processStream(reader, onChunkWrapper);
    } else {
      // Fallback to non-streaming for backward compatibility
      const data = await response.json();
      return data.choices[0].text.trim();
    }
  } catch (error) {
    // Check if this is an abort error (request was cancelled)
    if (error instanceof DOMException && error.name === 'AbortError') {
      console.log('Hyperbolic Completion API request was cancelled');
      throw new Error('Request cancelled');
    } else {
      console.error('Error calling Hyperbolic Completion API:', error);
      throw error;
    }
  }
}
